#include <SPI.h>
#include <RH_NRF24.h>
#include <Ultrasonic.h>


Ultrasonic ultrasonic(3,2); //trig, echo

RH_NRF24 nrf24;

const int S_armdown = 0;
const int S_armup = 1;
const int S_armupperm = 2;
const int CarThresholdValue = 30;
uint8_t Count = 80;
int state;


//int SensorInArm = 1;
//int SensorInCar = 2;
//int SensorOutArm = 3;
//int SensorOutCar = 4;

uint8_t buf[RH_NRF24_MAX_MESSAGE_LEN];

void setup() 
{
  int state = S_armdown;
  Serial.begin(9600);
  while (!Serial) 
    ; // wait for serial port to connect. Needed for Leonardo only
  if (!nrf24.init())
    Serial.println("init failed");
  // Defaults after init are 2.402 GHz (channel 2), 2Mbps, 0dBm
  if (!nrf24.setChannel(1))
    Serial.println("setChannel failed");
  if (!nrf24.setRF(RH_NRF24::DataRate2Mbps, RH_NRF24::TransmitPower0dBm))
    Serial.println("setRF failed");    

  setBuf(buf, Count);
  nrf24.send(buf, sizeof(buf));
}

void setBuf(uint8_t *buf, uint8_t Count)
{
  int i;
    for (i = 0; i < RH_NRF24_MAX_MESSAGE_LEN; ++i)
    buf[i] = Count;
}

void loop() 
{
  static int CurStateStartTime = 0;
  //int state;
  
  switch (state)
  {
    case S_armdown:
      if (ultrasonic.Ranging(CM) >= 15)
      {
        state =  S_armdown;
        //set pulse periodicity lower
        //set arduino to lower power mode
      }
      else if(ultrasonic.Ranging(CM) < 15)
      {
          state = S_armup;
          CurStateStartTime = millis();
          Count = Count - 1;
          setBuf(buf, Count);
                    
          Serial.println("Sending to nrf24_server");
          // Send a message to nrf24_server
          nrf24.send(buf, sizeof(buf));
  
          uint8_t len = sizeof(buf);
      }
        break;
   
        
        
    case S_armup:  
      if (ultrasonic.Ranging(CM) <= CarThresholdValue)
      {
        state = S_armup;
      }
      else if (ultrasonic.Ranging(CM) > CarThresholdValue)
      {
        state = S_armdown;
      }
  
      break;
  }
}
