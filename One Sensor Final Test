#include <SPI.h>
#include <RH_NRF24.h>
#include <Ultrasonic.h>


Ultrasonic ultrasonic(3,2);         //trig, echo

RH_NRF24 nrf24;                     //Call nRF module from RH library

const int S_armdown = 0;            //State armdown
const int S_armup = 1;              //State armup
const int S_armupperm = 2;          //State armupperm
const int CarThresholdValue = 30;   //Car distance threshold value to 30 cm
uint8_t Count = 80;                 //Upper lot available parking spots 
int state;                          //State for switch case


//int SensorInArm = 1;
//int SensorInCar = 2;
//int SensorOutArm = 3;
//int SensorOutCar = 4;

uint8_t buf[RH_NRF24_MAX_MESSAGE_LEN];  //8 bit buffer

void setup() 
{
  int state = S_armdown;          //Start in armdown state
  
  Serial.begin(9600);
  while (!Serial) 
    ; // wait for serial port to connect. Needed for Leonardo only
  if (!nrf24.init())
    Serial.println("init failed");
  // Defaults after init are 2.402 GHz (channel 2), 2Mbps, 0dBm
  if (!nrf24.setChannel(1))
    Serial.println("setChannel failed");
  if (!nrf24.setRF(RH_NRF24::DataRate2Mbps, RH_NRF24::TransmitPower0dBm))
    Serial.println("setRF failed");    

  setBuf(buf, Count);             //Set buffer to Count value
  nrf24.send(buf, sizeof(buf));   //Send buffer to receiver
}

void setBuf(uint8_t *buf, uint8_t Count)
{
  int i;
    for (i = 0; i < RH_NRF24_MAX_MESSAGE_LEN; ++i)      //set i = max message length
    buf[i] = Count;                                     //Set each byte = count value
}

void loop() 
{
  static int CurStateStartTime = 0;             //set current time in state = 0
  
  switch (state)
  {
    case S_armdown:                             //Case state = armdown
      if (ultrasonic.Ranging(CM) >= CarThresholdValue)         //If ultrasonic sensor reads distance >= 15 cm
      {
        state =  S_armdown;         
      
      }
      else if(ultrasonic.Ranging(CM) < CarThresholdValue)      //If ultrasonic sensor read distance < 15 cm
      {
          state = S_armup;                      //switch state = armup
          CurStateStartTime = millis();         //start new current state start time
          Count = Count - 1;                    //decrement count 
          setBuf(buf, Count);                   //set buffer = new count value
                    
          Serial.println("Sending to nrf24_server");
          // Send a message to nrf24_server
          nrf24.send(buf, sizeof(buf));         //send buffer to receiver at display
  
          uint8_t len = sizeof(buf);            //set length = buffer size
      }
        break;
   
        
        
    case S_armup:  
      if (ultrasonic.Ranging(CM) <= CarThresholdValue)      //if distance <= 30 cm
      {
        state = S_armup;                                    //keep state in arm up
      }
      else if (ultrasonic.Ranging(CM) > CarThresholdValue)  //if distance > 30 cm
      {
        state = S_armdown;                                  //Switch state to armdown
      }
  
      break;
  }
}
