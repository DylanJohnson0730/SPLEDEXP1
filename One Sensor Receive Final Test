#include <SPI.h>
#include <RH_NRF24.h>

#include <LiquidCrystal.h>                //include LCD library
LiquidCrystal lcd(8, 9, 4, 5, 6, 7);      //Define LCD pins

RH_NRF24 nrf24;                           //Define RF24 with RH library

void setup() 
{
  Serial.begin(9600);
  while (!Serial) 
    ; // wait for serial port to connect. Needed for Leonardo only
  if (!nrf24.init())
    Serial.println("init failed");
  // Defaults after init are 2.402 GHz (channel 2), 2Mbps, 0dBm
  if (!nrf24.setChannel(1))
    Serial.println("setChannel failed");
  if (!nrf24.setRF(RH_NRF24::DataRate2Mbps, RH_NRF24::TransmitPower0dBm))
    Serial.println("setRF failed");    

  lcd.begin(16, 2);                 //LCD Begin
  lcd.setCursor(0, 0);              //Set cursor to top row
  lcd.print("Count = ");            //Print String
}

void loop()
{
  if (nrf24.available())                      //if nrf24 is available to receive data
  {
    // Should be a message for us now   
    uint8_t buf[RH_NRF24_MAX_MESSAGE_LEN];    //set buffer to 8 bits
    uint8_t len = sizeof(buf);                //set length of buffer
    if (nrf24.recv(buf, &len))                //if nrf24 can receive data
    {
      //NRF24::printBuffer("request: ", buf, len);
      Serial.print("got request: ");          //serial print for debugging
      Serial.print(buf[1]);                   //serial print for debugging
      Serial.println((char*)buf);             //serial print for debugging
      
      lcd.setCursor(0, 1);                    //Set cursor to bottom row
      lcd.print(buf[1]);                      //Print Count value
      lcd.print(" spaces  ");                 //Print spaces after buffer
        
      // Send a reply
      uint8_t data[] = "Received";            //send a reciept message back
      nrf24.send(data, sizeof(data));         
      nrf24.waitPacketSent();
      Serial.println("Sent a reply");         //send a reciept message back
      
    }
    else
    {
      Serial.println("recv failed");          //if nRF24 not available
    }
  }
}
